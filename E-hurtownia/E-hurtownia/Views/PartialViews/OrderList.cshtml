@{ 
    List<Customers> customerList = ViewBag.Customers;
    List<Orders> orderList = ViewBag.Orders;
    List<OrderItems> orderItems = ViewBag.OrderItems;
    List<OrderStatuses> orderStatuses = ViewBag.OrderStatuses;
    List<Persons> personList = ViewBag.Persons;
    List<Products> productList = ViewBag.Products;

    int? meGroup = ViewBag.MeGroup;
    int tableColspan = 5; // 5 for Customers, 6 for Admins/Storekeepers
}

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

<script type="text/javascript">
    function toggleOrderItems(targetID) {
        document.getElementById(targetID).classList.toggle("d-none");

        document.getElementById(targetID + '_BUTTON').classList.toggle("btn-danger");
        document.getElementById(targetID + '_BUTTON').classList.toggle("btn-success");
    }
</script>

<table class="table table-striped mt-4">
    <thead>
        <tr>
            <th>Order ID</th>
            <th>Order date & time</th>

            @if (meGroup == 1 || meGroup == 3) {
                <th>Customer name</th>
            }

            <th>Order total value</th>
            <th>Order status</th>
            <th style="width: 20%">Actions</th>
        </tr>
    </thead>

    <tbody>
        @foreach (Orders order in orderList.OrderByDescending(order => order.DateOrdered)) {
            DateTime orderDateTime = (DateTime) order.DateOrdered;
            List<OrderItems> thisOrder = orderItems.Where(item => item.FkOrder == order.IdOrder).ToList();

            string orderStatus = orderStatuses.Where(status => status.IdOrderStatus == order.FkOrderStatus).Single().Name;
            decimal orderTotalValue = 0M;

            foreach (OrderItems singleItem in thisOrder) {
                PriceCalculatorReturn calculatedItem = PriceCalculator.CalculatePrice(singleItem.FkProduct, singleItem.Amount);
                orderTotalValue += calculatedItem.NewBasePrice * singleItem.Amount;
            }

            <tr>
                <td>@order.IdOrder</td>
                <td>@orderDateTime.ToString("dd.MM.yyyy, HH:mm")</td>

                @if (meGroup == 1 || meGroup == 3) {
                    Customers ordererCustomer = customerList.Where(customer => customer.IdCustomer == order.FkCustomer).Single();
                    Persons ordererPerson = personList.Where(person => person.IdPerson == ordererCustomer.FkPerson).Single();

                    <td>@ordererPerson.Firstname @ordererPerson.Lastname</td>
                }

                <td>@orderTotalValue.ToString("F2") €</td>
                <td>
                    @orderStatus

                    @if (order.FkOrderStatus == 4) {
                        <br />
                        <span class="badge badge-dark">Order completed</span>
                    }
                </td>
                <td>
                    <form method="get">
                        <div class="form-group">
                            <input id="OID_ROW_@(order.IdOrder)_BUTTON" type="button" class="btn btn-success btn-sm" value="Order items list" onclick="toggleOrderItems('OID_ROW_@order.IdOrder');" />
                        </div>

                        @if (meGroup == 2) { // Only Customers are able to pay
                            <div class="form-group">
                                @if (order.FkOrderStatus == 1) {
                                    <input type="submit" class="btn btn-primary btn-sm" value="Pay @orderTotalValue.ToString("F2") €" asp-controller="Customer" asp-action="Pay" asp-route-id="@order.IdOrder" />
                                } else {
                                    <input type="submit" class="btn btn-primary btn-sm" value="Already paid" disabled="disabled" />
                                }

                                @if (order.DatePaid != null) {
                                    DateTime paidDateTime = (DateTime) order.DatePaid;
                                    <small>paid on @paidDateTime.ToString("dd.MM.yyyy, HH:mm")</small>
                                }
                            </div>
                        }

                        @if (meGroup == 1 || meGroup == 3) { // Actions for Admins or Storekeepers
                            <div class="form-group">
                                @if (order.FkOrderStatus == 2) {
                                    <input type="submit" class="btn btn-primary btn-sm" value="Send" asp-controller="Storekeeper" asp-action="Send" asp-route-id="@order.IdOrder" />

                                    @if (order.DatePaid != null) {
                                        DateTime paidDateTime = (DateTime) order.DatePaid;
                                        <small>paid on @paidDateTime.ToString("dd.MM.yyyy, HH:mm")</small>
                                    }
                                } else {
                                    @if (order.DatePaid == null) {
                                        <input type="submit" class="btn btn-primary btn-sm" value="Waiting for pay" disabled="disabled" />
                                    } else {
                                        <input type="submit" class="btn btn-primary btn-sm" value="Already sent" disabled="disabled" />

                                        @if (order.DatePaid != null) {
                                            DateTime paidDateTime = (DateTime) order.DatePaid;
                                            <small>paid on @paidDateTime.ToString("dd.MM.yyyy, HH:mm")</small>
                                        }
                                    }
                                }
                            </div>

                            <div class="form-group">
                                @if (order.FkOrderStatus == 3) {
                                    <input type="submit" class="btn btn-danger btn-sm" value="Deliver" asp-controller="Storekeeper" asp-action="Deliver" asp-route-id="@order.IdOrder" />

                                    @if (order.DatePaid != null) {
                                        DateTime sentDateTime = (DateTime) order.DateSent;
                                        <small>sent on @sentDateTime.ToString("dd.MM.yyyy, HH:mm")</small>
                                    }
                                } else {
                                    @if (order.DateSent == null) {
                                        <input type="submit" class="btn btn-danger btn-sm" value="Waiting for sending" disabled="disabled" />
                                    } else {
                                        <input type="submit" class="btn btn-danger btn-sm" value="Delivered" disabled="disabled" />

                                        @if (order.DatePaid != null) {
                                            DateTime sentDateTime = (DateTime) order.DateSent;
                                            <small>sent on @sentDateTime.ToString("dd.MM.yyyy, HH:mm")</small>
                                        }
                                    }
                                }
                            </div>
                        }
                    </form>
                </td>
            </tr>

            <tr class="d-none" id="OID_ROW_@order.IdOrder">
                @if (meGroup == 1 || meGroup == 3) {
                    tableColspan = 6;
                }

                <td colspan="@(tableColspan)">
                    <table class="table table-dark table-hover">
                        <thead>
                            <tr>
                                <th>Item ID</th>
                                <th>Product</th>
                                <th>Amount</th>
                                <th>Total value</th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (OrderItems item in orderItems.Where(item => item.FkOrder == order.IdOrder)) {
                                <tr>
                                    <td>@item.IdOrderItem</td>
                                    <td>@productList.Where(product => product.IdProduct == item.FkProduct).Single().Name</td>
                                    <td>@item.Amount</td>
                                    <td>
                                        @{
                                            PriceCalculatorReturn calculatedItem = PriceCalculator.CalculatePrice(item.FkProduct, item.Amount);

                                            <span>
                                                @((item.Amount * calculatedItem.NewBasePrice).ToString("F2"))

                                                @if (calculatedItem.DiscountValue > 0M) {
                                                    <small class="text-success">(@calculatedItem.DiscountValue % off)</small>
                                                }
                                            </span>
                                         }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </td>
            </tr>
        }
    </tbody>
</table>