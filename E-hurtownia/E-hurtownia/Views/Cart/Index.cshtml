@{
    @model List<CartElement>
    ViewData["Title"] = "Shopping cart";

    List<Products> productList = ViewBag.Products;
    List<Units> unitList = ViewBag.Units;
    int cartIndex = 0;
}

<h1>Shopping cart</h1>
<h5>Currently, you have @Model.Count items in cart</h5>

<div class="container col-12 mt-4">
    @if (ViewBag.IsEverythingAvailable == false && ViewBag.UnavailableProductID != null) {
        <div class="alert alert-danger alert-dismissible fade show my-3">
            <strong>Error!</strong> Your order cannot be created because one of its products is currently unavailable!

            <ul>
                <li>Product ID - @ViewBag.UnavailableProductID</li>
                <li>Product name - @ViewBag.UnavailableProductName</li>
                <li>Available units - @ViewBag.UnavailableProductAmount (ordered - @ViewBag.UnavailableProductOrdered)</li>
            </ul>

            <button type="button" class="close" data-dismiss="alert">
                <span>&times;</span>
            </button>
        </div>
    }

    <div class="row">
        <div class="col-12">
            <table class="table table-hover table-dark">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Product ID</th>
                        <th>Product name</th>
                        <th>Quantity</th>
                        <th>Unit</th>
                        <th>Price per unit</th>
                        <th>Total price</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (CartElement element in @Model) {
                        Products currentProduct = productList.Where(product => product.IdProduct == element.ProductID).Single();
                        <tr>
                            <td>@(++cartIndex)</td>
                            <td>@element.ProductID</td>
                            <td>@currentProduct.Name</td>
                            <td>@element.ProductQuantity</td>
                            <td>@unitList.Where(unit => unit.IdUnit == currentProduct.FkUnit).Single().Name (@unitList.Where(unit => unit.IdUnit == currentProduct.FkUnit).Single().ShortName)</td>
                            <td>@currentProduct.BasePricePerUnit.ToString("F2") €</td>
                            <td>@((currentProduct.BasePricePerUnit * element.ProductQuantity).ToString("F2")) €</td>
                            <td>
                                <form method="post">
                                    <input type="submit" class="btn btn-sm btn-danger" value="Delete item" asp-controller="Cart" asp-action="DeleteItem" asp-route-id="@(cartIndex - 1)" />
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="row">
        <div class="col-12 d-flex flex-row-reverse">
            @if (Model.Count > 0) {
                <form method="get">
                    <input type="submit" class="btn btn-success" value="Create an order" asp-controller="Customer" asp-action="CreateOrder" />
                </form>
            } else {
                <input type="submit" class="btn btn-success" value="Create an order" disabled="disabled" />
            }
        </div>
    </div>
</div>